<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Reminder List</title>
    <!-- <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous"> -->
    <script
      src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
      integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
      crossorigin="anonymous"
    ></script>
    
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
      integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z"
      crossorigin="anonymous"
    />
    <style>
      /* YO LETS TEST! */
      body {
        
      }
      :root {
        --today: #9a9898;
        --hover-color: #9796f070; 
        --selected: #9796f0;
        --upcoming-reminder: #f0969670;

        /* from bootstrap style sheet above*/
        
      }
      /* general layout */
      
      * {
        padding: 0;
        margin: 0;
        box-sizing: border-box;
      }
      body { /* login */
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #ffffff; 
      }
      .custom-container {
        max-width: 400px; 
        width: 100%; 
        padding: 20px; 
        background-color: rgb(255, 254, 252) }

        h3.text-center {
          padding: 40px;
          
        }
        
        .register-link {
          color: #6c757d; /
          
        }
        .register-link:hover {
          color: #495057; 
        }
        .btn-secondary {margin-bottom: 50px; 
        }


        /* nav bar */
        .navbar{
          max-height: 4rem;
        }
      
        /* log out button */
        #btn-logout{
          position: relative;
          top:1.6em;
        }
      
        

      .split {
        display:flex;
      }

      .box{ 
        overflow: scroll;
        max-height: 70vh;
        margin: 0px 25px 50px 0px;
      }

      #list-group {
        margin: 22px 0px 25px 0px;
        width: 700px;
      }
      
      body{
        overflow: hidden;
        display:block;
        height: 100vh;
      }

      /* reminders */
      .list-group-item {
        display:flex;
        flex-direction: column;
      }


      /*reminder list menu*/
      #reminder-list-menu{
        display: flex;
        justify-content: flex-end;
      }
      /* create reminder button */

      #create-reminder{
        margin: 25px 0px 0px  0px;
      }

      /* reminder dropdown menu */
      .list-group-item>div{
        display:flex;
        flex-direction: row;
        height:28px;
      }

      .reminder-button {
        width: 25px;
        text-align: center;
        justify-content: flex-end;
        margin-left: auto;
        background-color: white;
        border:none;
      }

      .reminder-button:after { 
        content: '\2807';
        font-size: 20px;
      }

      .reminder-menu {
        display:none;
        position:absolute;
        top: 12px;
        right:42px;
       
        background-color: transparent;
        animation: to-top 0.6s forwards;
      }
      
      .reminder-button:hover + .reminder-menu,
      .reminder-menu:hover {
        display:flex;
        flex-direction: column;
      }

      /* reminder menu buttons */

      .reminder-menu a,
      div form .btn-danger {
        background-color: #e9e9e9;
        color:black;
        text-align: center;
        padding: 3px 16px;
        margin: 0px;
        transition: background-color .2s ease-in-out;
        text-decoration: none;
        box-shadow: none;
        border: none;
      }

      .reminder-menu a:hover,
      .btn-danger:hover{
        background-color: var(--hover-color);
        color:black;
        transition: background-color .2s ease-in-out; 
      }

      /* reminder title */

      /* I don't know if it's clear to users that the titles are clickable*/
      .list-group-item>div>a,
      .list-group-item>div>a:visited{
        color: black;
        padding: 0px 0px 5px 0px;
        transition: padding .2s ease-in-out;
      }

      .list-group-item>div>a:hover{
        text-decoration: none;
        background-color: var(--hover-color);
        border-radius: 5%;
        padding: 0px 5px;
        transition: padding .2s ease-in-out;
      }



      /* calendar */
      
      pre { /*overrides bootstrap*/ 
        color:white;
        margin-bottom: 0;
      }

      .calendar {
        height: 495px;
        width: max-content;
        background-color: white;
        overflow: hidden;
        padding: 35px 50px 0px 50px;
        margin: 50px 0px 0px 0px; 
      }

      .calendar-header {
        background: #8089FE;
        display: flex;
        justify-content: space-between;
        border-radius: 7px;
        align-items: center;
        font-weight: 700;
        color: #ffffff;
        padding: 10px;
        height:54px;
      }

      .calendar-body {
        padding: 10px;
      }

      .calendar-week-days {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        font-weight: 600;
        cursor: pointer;
        color: rgb(104, 104, 104);
      }

      .calendar-week-days div:hover {
        color: black;
        transform: scale(1.2);
      }

      .calendar-week-days div {
        display: grid;
        place-items: center;
        color: #6D67CF;
        height: 50px;
      }

      .calendar-days {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        grid-template-rows: repeat(6, 1fr);
        gap: 2px;
        color: #0A0921;
        animation: to-top 1s forwards;
      }

      .calendar-days div {
        width: 37px;
        height: 33px;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 5px;
        position: relative;
        cursor: pointer;
      }

      .month-picker {
        padding: 0px 10px;
        border-radius: 10px;
        cursor: pointer;
      }

      .month-picker:hover{
        transform: scale(1.12);
        transition: all 0.2s ease-in-out;
        background-color: var(--selected);
        border-radius: 15%;
      }

      .year-picker {
        display: flex;
        align-items: center;
      }

      .year-change {
        height: 30px;
        width: 30px;
        border-radius: 50%;
        display: grid;
        place-items: center;
        margin: 0px 10px;
        cursor: pointer;
      }

      .year-change:hover {
        background-color: var(--selected);
        transition: all .2s ease-in-out;
        transform: scale(1.12);
      }

      .calendar-footer {
        padding:1.25px;
        margin-bottom: 10px;
        margin-top:15px;
        display: flex;
        justify-content: flex-end;
        align-items: center;
        background-color: var(--today);
      }

      #year {
        padding-right: 6px;
        padding-left: 6px;
      }

      .calendar-days div span {
        position: absolute;
      }

      .calendar-days div:hover {
        transition: width 0.2s ease-in-out, height 0.2s ease-in-out;
        background-color: var(--hover-color);
        border-radius: 20%;
        color: black;
      }

      .calendar-days div.current-date {
        color: #f8fbff;
        background-color: var(--today);
        border-radius: 20%;
      }

      .month-list {
        position: relative;
        left: 0;
        bottom: 315px;
        background-color: #ebebeb;
        color: #151426;
        display: grid;
        grid-template-columns: repeat(3, auto);
        gap: 5px;
        border-radius: 20px;
      }

      .month-list>div {
        display: grid;
        place-content: center;
        margin: 5px 10px;
        transition: all 0.2s ease-in-out;
      }

      .month-list>div>div {
        border-radius: 15px;
        padding: 10px;
        cursor: pointer;
      }

      .month-list>div>div:hover {
        background-color: var(--today);
        color: #f8fbff;
        transform: scale(0.9);
        transition: all 0.2s ease-in-out;
      }


      .month-list.show {
        visibility: visible;
        pointer-events: visible;
        transition: 0.6s ease-in-out;
        animation: to-left .71s forwards;
      }

      .month-list.hideonce {
        visibility: hidden;
      }

      .month-list.hide {
        animation: to-right 1s forwards;
        visibility: none;
        pointer-events: none;
      }

      .date-time-formate {
        height: 4rem;
        width: 100%;
        font-family: Dubai Light, Century Gothic;
        position: relative;
        display: flex;
        justify-content: center;
        align-items: center;
      }

      .day-text-formate {
        font-family: Microsoft JhengHei UI;
        font-size: 1.4rem;
        padding-right: 5%;
        border-right: 3px solid var(--today);
      }

      .date-time-value {
        display: block;
        position: relative;
        text-align: center;
        padding-left: 5%;
      }

      .time-formate {
        font-size: 1.5rem;
      }

      @keyframes to-top {
        0% {
          transform: translateY(-10%);
          opacity: 0;
        }

        100% {
          transform: translateY(0%);
          opacity: 1;
        }
      }

      @keyframes to-left {
        0% {
          transform: translatex(230%);
          opacity: 1;
        }

        100% {
          transform: translatex(0);
          opacity: 1;
        }
      }

      @keyframes to-right {
        10% {
          transform: translatex(0);
          opacity: 1;
        }

        100% {
          transform: translatex(-150%);
          opacity: 1;
        }
      }

      @keyframes showtime {
        0% {
          transform: translatex(250%);
          opacity: 1;
        }

        100% {
          transform: translatex(0%);
          opacity: 1;
        }
      }

      @keyframes hidetime {
        0% {
          transform: translatex(0%);
          opacity: 1;
        }

        100% {
          transform: translatex(-370%);
          opacity: 1;

        }

      
      }

      .notebook-holder {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
      }
      
      .notebook {
        border: black 2px solid;
        }

        .notebook.show {
        opacity: 1;
        }
    </style>
  </head>
  <body>
    <%- body %>
    <script>
      const isLeapYear = (year) => {
  return (
    (year % 4 === 0 && year % 100 !== 0 && year % 400 !== 0) ||
    (year % 100 === 0 && year % 400 === 0)
  );
};
const getFebDays = (year) => {
  return isLeapYear(year) ? 29 : 28;
};
let calendar = document.querySelector('.calendar');
const month_names = [
    'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December',
  ];
let month_picker = document.querySelector('#month-picker');
const dayTextFormate = document.querySelector('.day-text-formate');
const timeFormate = document.querySelector('.time-formate');
const dateFormate = document.querySelector('.date-formate');

month_picker.onclick = () => {
  month_list.classList.remove('hideonce');
  month_list.classList.remove('hide');
  month_list.classList.add('show');
  dayTextFormate.classList.remove('showtime');
  dayTextFormate.classList.add('hidetime');
  timeFormate.classList.remove('showtime');
  timeFormate.classList.add('hideTime');
  dateFormate.classList.remove('showtime');
  dateFormate.classList.add('hideTime');
};

const generateCalendar = (month, year) => {
  let calendar_days = document.querySelector('.calendar-days');
  calendar_days.innerHTML = '';
  let calendar_header_year = document.querySelector('#year');
  let days_of_month = [
      31,
      getFebDays(year),
      31,
      30,
      31,
      30,
      31,
      31,
      30,
      31,
      30,
      31,
    ];

  let currentDate = new Date();

  month_picker.innerHTML = month_names[month];

  calendar_header_year.innerHTML = year;

  let first_day = new Date(year, month);


  for (let i = 0; i <= days_of_month[month] + first_day.getDay() - 1; i++) {

    let day = document.createElement('div');

    if (i >= first_day.getDay()) {
      day.innerHTML = i - first_day.getDay() + 1;

      if (i - first_day.getDay() + 1 === currentDate.getDate() &&
        year === currentDate.getFullYear() &&
        month === currentDate.getMonth()
      ) {
        day.classList.add('current-date');
      }
    }
    calendar_days.appendChild(day);
  }
};

let month_list = calendar.querySelector('.month-list');
month_names.forEach((e, index) => {
  let month = document.createElement('div');
  month.innerHTML = `<div>${e}</div>`;

  month_list.append(month);
  month.onclick = () => {
    currentMonth.value = index;
    generateCalendar(currentMonth.value, currentYear.value);
    month_list.classList.replace('show', 'hide');
    dayTextFormate.classList.remove('hideTime');
    dayTextFormate.classList.add('showtime');
    timeFormate.classList.remove('hideTime');
    timeFormate.classList.add('showtime');
    dateFormate.classList.remove('hideTime');
    dateFormate.classList.add('showtime');
  };
});

(function() {
  month_list.classList.add('hideonce');
})();
document.querySelector('#pre-year').onclick = () => {
  --currentYear.value;
  generateCalendar(currentMonth.value, currentYear.value);
};
document.querySelector('#next-year').onclick = () => {
  ++currentYear.value;
  generateCalendar(currentMonth.value, currentYear.value);
};

let currentDate = new Date();
let currentMonth = { value: currentDate.getMonth() };
let currentYear = { value: currentDate.getFullYear() };
generateCalendar(currentMonth.value, currentYear.value);

const todayShowTime = document.querySelector('.time-formate');
const todayShowDate = document.querySelector('.date-formate');

const currshowDate = new Date();
const showCurrentDateOption = {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
  weekday: 'long',
};
const currentDateFormate = new Intl.DateTimeFormat(
  'en-US',
  showCurrentDateOption
).format(currshowDate);
todayShowDate.textContent = currentDateFormate;
setInterval(() => {
  const timer = new Date();
  const option = {
    hour: 'numeric',
    minute: 'numeric',
    second: 'numeric',
  };
  const formateTimer = new Intl.DateTimeFormat('en-us', option).format(timer);
  let time = `${`${timer.getHours()}`.padStart(
      2,
      '0'
    )}:${`${timer.getMinutes()}`.padStart(
      2,
      '0'
    )}: ${`${timer.getSeconds()}`.padStart(2, '0')}`;
  todayShowTime.textContent = formateTimer;
}, 1000);


document.querySelector('#next-year').onclick = () => {
    ++currentYear.value;
    generateCalendar(currentMonth.value, currentYear.value);
    updateCalendarDays(currentMonth.value, currentYear.value);
  };

  function getDaysInMonth(month, year) {
    return new Date(year, month + 1, 0).getDate();
  }

  function updateCalendarDays(month, year) {
    let daysInMonth = getDaysInMonth(month, year);
    let calendarDays = document.querySelector('.calendar-days');
    calendarDays.innerHTML = '';
    // Get the first day of the month
    let firstDay = new Date(currentYear.value, currentMonth.value, 1).getDay();
    

// Create empty elements for each day of the week before the first day of the month
for(let i = 0; i < firstDay; i++) {
  let span = document.createElement('span');
  calendarDays.appendChild(span);
}





      for(let i = 1; i <= daysInMonth; i++) {
        console.log
        let span = document.createElement('span');
        span.classList.add('date-button');
        span.dataset.date = i;
        span.textContent = i;
        span.addEventListener('click', event => {
        let date = event.target.dataset.date;
        console.log("THIS IS THE DATE")
        console.log(date)
        let month = currentMonth.value + 1; // JavaScript months are 0-based
        let year = currentYear.value;
        let fullDate = `${year}-${month.toString().padStart(2, '0')}-${date.padStart(2, '0')}`;
        console.log(fullDate)
        fetch(`/reminders/${fullDate}`)
        .then(response => response.json())
        .then(reminders => {
        // Get the container
        let container = document.getElementById('list-group');

        // Check if the container is null
        if (container) {
          // Clear the existing reminders
          container.innerHTML = '';

          // Add the new reminders
          // Add the new reminders
          reminders.forEach(reminder => {
  let dueDate = new Date(reminder.dateDue);
let localDueDate = dueDate.toLocaleString();
console.log(localDueDate);
  let reminderElement = document.createElement('li');
  reminderElement.className = 'list-group-item';

  let mainDiv = document.createElement('div');
  reminderElement.appendChild(mainDiv);

  let link = document.createElement('a');
  link.href = `/reminder/${reminder.id}`;
  link.textContent = reminder.title;
  link.style.fontWeight = 'bold';
  mainDiv.appendChild(link);

  let buttonDiv = document.createElement('div');
  buttonDiv.className = 'reminder-button';
  mainDiv.appendChild(buttonDiv);

  let menuDiv = document.createElement('div');
  menuDiv.className = 'reminder-menu';
  mainDiv.appendChild(menuDiv);

  let editLink = document.createElement('a');
  editLink.href = `/reminder/${reminder.id}/edit`;
  editLink.textContent = 'Edit';
  menuDiv.appendChild(editLink);

  let form = document.createElement('form');
  form.className = 'deleteForm';
  form.method = 'POST';
  form.action = `/reminder/delete/${reminder.id}`;
  menuDiv.appendChild(form);

  let button = document.createElement('button');
  button.type = 'submit';
  button.className = 'btn btn-danger';
  button.textContent = 'Delete';
  form.appendChild(button);

  if (reminder.dueDate) {
  let dueDateEm = document.createElement('em');
  dueDateEm.className = 'reminder-due';
  dueDateEm.textContent = reminder.dueDate;  // Display the date directly
  reminderElement.appendChild(dueDateEm);
}

  let descriptionP = document.createElement('p');
  descriptionP.textContent = reminder.description;  // Replace with the actual reminder description
  reminderElement.appendChild(descriptionP);

  container.appendChild(reminderElement);
});

          // If there are no reminders, display a message
          if (reminders.length === 0) {
            let reminderElement = document.createElement('li');
            reminderElement.className = 'list-group-item';
            reminderElement.textContent = 'No reminders';
            container.appendChild(reminderElement);
          }
        } else {
          console.error('Error: container is null');
        }
      })
      .catch(error => {
        console.error('Error:', error);
      });
    });
      calendarDays.appendChild(span);
    }
  }

  // Call updateCalendarDays with the current month and year
  updateCalendarDays(currentMonth.value, currentYear.value);


  // Call updateCalendarDays with the current month and year
  updateCalendarDays(currentMonth.value, currentYear.value);



  </script>
    <script
      src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"
      crossorigin="anonymous"
    ></script>
  </body>
</html>